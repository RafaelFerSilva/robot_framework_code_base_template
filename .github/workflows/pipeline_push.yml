name: Push CI

on:
  push:
    branches:
      - main
      - develop

jobs:
  push_tests:
    permissions: write-all
    name: Push E2E Tests
    runs-on: ubuntu-24.04

    services:
      mysql:
        image: mysql:8.0
        ports:
          - "3306:3306"
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        options: >-
          --health-cmd="mysqladmin ping --host=localhost --user=root --password=rootpassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          -v ${{ github.workspace }}/init.sql:/docker-entrypoint-initdb.d/init.sql
          --user root

    steps:
      - name: Checkout the test repository
        uses: actions/checkout@v4

      - name: Install Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libffi-dev python3-dev

      - name: Install Node.js 20.11.1
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'
      
      - name: Create reports folder
        run: |
          mkdir -p reports/coverage
          mkdir -p reports/robotmetrics

      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -U -r requirements.txt
          npm install @playwright/test
          npx playwright install-deps
          rfbrowser init

      - name: Wait for MySQL to be ready
        run: |
          until docker exec $(docker ps -q -f "ancestor=mysql") mysqladmin ping --host=localhost --user=root --password=rootpassword --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done
          echo "MySQL is ready!"

      - name: Run the tests
        env:
          # For real testing environments these variables must be secret and not exposed.
          DB_NAME: testdb
          DB_USER: testuser
          DB_PASSWORD: testpassword
          DB_HOST: localhost
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: robot -d ./reports --output output.xml  -v HEADLESS:true -v PIPELINE:true  ./tests

      - name: Validate Test Coverage
        run: |
          python ./resources/libraries/test_coverage_validator.py \
            ./reports/output.xml \
            --min-coverage 80 \
            --output-dir ./reports/coverage

      - name: Upload Push Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: push-test-results
          path: |
            ./reports
            ./reports/coverage
            ./reports/robotmetrics
          retention-days: 3
          if-no-files-found: ignore
